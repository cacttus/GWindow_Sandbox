#include "./VulkanDebug.h"

namespace VG {

// ^\s+([a-zA-Z0-9_]+)\s=\s.*
// V_ENM_STR($1);
#define V_ENM_STR(xx_)    \
  if (r == xx_) {         \
    ret = string_t(#xx_); \
  }
#define V_ENM_STR2(xx_, yy_) \
  if (r == xx_) {            \
    ret = string_t(#yy_);    \
  }
#define V_STC_STR(x, y)                                                                       \
  str += Stz " [" + App::toHex((int)off, true) + "][" + off + "]" + std::string(#y) + "\r\n"; \
  off += sizeof(x::y);
//
// string_t VulkanDebug::queueFamilyInfo_toString() {
//   std::vector<VkQueueFamilyProperties> queueFamilies(queueFamilyCount);
//   vkGetPhysicalDeviceQueueFamilyProperties(_physicalDevice, &queueFamilyCount, queueFamilies.data());
//
//   string_t qf_info = "";
//   for (int i = 0; i < queueFamilies.size(); ++i) {
//     auto& queueFamily = queueFamilies[i];
//
//     qf_info += Stz "  Queue " + i + Os::newline();
//     qf_info += Stz "   flags:";
// #define PRINT_QUEUE_FLAG(x)             \
//   if (queueFamily.queueFlags & x > 0) { \
//     qf_info += Stz #x + " ";            \
//   }
//     PRINT_QUEUE_FLAG(VK_QUEUE_GRAPHICS_BIT);
//     PRINT_QUEUE_FLAG(VK_QUEUE_COMPUTE_BIT);
//     PRINT_QUEUE_FLAG(VK_QUEUE_TRANSFER_BIT);
//     PRINT_QUEUE_FLAG(VK_QUEUE_SPARSE_BINDING_BIT);
//     PRINT_QUEUE_FLAG(VK_QUEUE_PROTECTED_BIT);
//     qf_info += Os::newline();
//     qf_info += Stz "   queueCount:" + queueFamily.queueCount + Os::newline();
//     qf_info += Stz "   Image Transfer Granularity: width:" + queueFamily.minImageTransferGranularity.width +
//                "height:" + queueFamily.minImageTransferGranularity.height +
//                "depth:" + queueFamily.minImageTransferGranularity.depth + Os::newline();
//   }
//
//   return qf_info;
// }

int VulkanDebug::SampleCount_ToInt(MSAA c) {
  if (c == MSAA::Disabled) { return 1; }
  else if (c == MSAA::MS_2_Samples) { return 2; }
  else if (c == MSAA::MS_4_Samples) { return 4; }
  else if (c == MSAA::MS_8_Samples) { return 8; }
  else if (c == MSAA::MS_16_Samples) { return 16; }
  else if (c == MSAA::MS_32_Samples) { return 32; }
  else if (c == MSAA::MS_64_Samples) { return 64; }
  else {
    BRThrowException("Invalid or unsupported SampleCount enum '" + std::to_string((int)c) + "'");
  }
 }


#pragma region Structure Memory Layouts
//We could use some kind of file processing gimmick to process all vulkan structures.
//Perhaps sigtrap the access violations.
string_t VulkanDebug::VkGraphicsPipelineCreateInfo_toString() {
  string_t str = "[ hex] [decimal] member_name \r\n";
  size_t off = 0;

  V_STC_STR(VkGraphicsPipelineCreateInfo, sType);
  V_STC_STR(VkGraphicsPipelineCreateInfo, sType);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pNext);
  V_STC_STR(VkGraphicsPipelineCreateInfo, flags);
  V_STC_STR(VkGraphicsPipelineCreateInfo, stageCount);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pStages);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pVertexInputState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pInputAssemblyState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pTessellationState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pViewportState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pRasterizationState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pMultisampleState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pDepthStencilState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pColorBlendState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, pDynamicState);
  V_STC_STR(VkGraphicsPipelineCreateInfo, layout);
  V_STC_STR(VkGraphicsPipelineCreateInfo, renderPass);
  V_STC_STR(VkGraphicsPipelineCreateInfo, subpass);
  V_STC_STR(VkGraphicsPipelineCreateInfo, basePipelineHandle);
  V_STC_STR(VkGraphicsPipelineCreateInfo, basePipelineIndex);
  return str;
}
string_t VulkanDebug::VkRenderPassBeginInfo_toString() {
  string_t str = "[ hex] [decimal] member_name \r\n";
  size_t off = 0;

  V_STC_STR(VkRenderPassBeginInfo, sType);
  V_STC_STR(VkRenderPassBeginInfo, pNext);
  V_STC_STR(VkRenderPassBeginInfo, renderPass);
  V_STC_STR(VkRenderPassBeginInfo, framebuffer);
  V_STC_STR(VkRenderPassBeginInfo, renderArea);
  V_STC_STR(VkRenderPassBeginInfo, clearValueCount);
  V_STC_STR(VkRenderPassBeginInfo, pClearValues);

  return str;
}
#pragma endregion
#pragma region Stringify Methods
// ^\s+([a-zA-Z0-9_]+)\s=\s.*
// V_ENM_STR($1);
string_t VulkanDebug::OutputMRT_toString(OutputMRT r) {
  string_t ret = "";
  V_ENM_STR2(OutputMRT::RT_Undefined, RT_Undefined);
  V_ENM_STR2(OutputMRT::RT_DefaultColor, RT_DefaultColor);
  V_ENM_STR2(OutputMRT::RT_DefaultDepth, RT_DefaultDepth);
  V_ENM_STR2(OutputMRT::RT_DF_Position, RT_DF_Position);
  V_ENM_STR2(OutputMRT::RT_DF_Color, RT_DF_Color);
  V_ENM_STR2(OutputMRT::RT_DF_Depth_Plane, RT_DF_Depth_Plane);
  V_ENM_STR2(OutputMRT::RT_DF_Normal, RT_DF_Normal);
  V_ENM_STR2(OutputMRT::RT_DF_Pick, RT_DF_Pick);
  V_ENM_STR2(OutputMRT::RT_Custom0, RT_Custom0);
  V_ENM_STR2(OutputMRT::RT_Custom1, RT_Custom1);
  V_ENM_STR2(OutputMRT::RT_Custom2, RT_Custom2);
  V_ENM_STR2(OutputMRT::RT_Custom3, RT_Custom3);
  V_ENM_STR2(OutputMRT::RT_Custom4, RT_Custom4);
  V_ENM_STR2(OutputMRT::RT_Custom5, RT_Custom5);
  V_ENM_STR2(OutputMRT::RT_Custom6, RT_Custom6);
  V_ENM_STR2(OutputMRT::RT_Custom7, RT_Custom7);
  V_ENM_STR2(OutputMRT::RT_Custom8, RT_Custom8);
  V_ENM_STR2(OutputMRT::RT_Custom9, RT_Custom9);
  V_ENM_STR2(OutputMRT::RT_Enum_Count, RT_Enum_Count);
  return ret;
}
string_t VulkanDebug::VkDescriptorType_toString(VkDescriptorType r) {
  string_t ret = "";
  V_ENM_STR(VK_DESCRIPTOR_TYPE_SAMPLER);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_STORAGE_IMAGE);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_STORAGE_BUFFER);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_BEGIN_RANGE);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_END_RANGE);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_RANGE_SIZE);
  V_ENM_STR(VK_DESCRIPTOR_TYPE_MAX_ENUM);
  return ret;
}

string_t VulkanDebug::VkMemoryPropertyFlags_toString(VkMemoryPropertyFlags r) {
  string_t ret = "";

  V_ENM_STR(VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
  V_ENM_STR(VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT);
  V_ENM_STR(VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);
  V_ENM_STR(VK_MEMORY_PROPERTY_HOST_CACHED_BIT);
  V_ENM_STR(VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT);
  V_ENM_STR(VK_MEMORY_PROPERTY_PROTECTED_BIT);
#ifdef VK_VERSION_1_2
  V_ENM_STR(VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD);
  V_ENM_STR(VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD);
#endif
  V_ENM_STR(VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM);
  return ret;
}
string_t VulkanDebug::VkColorSpaceKHR_toString(VkColorSpaceKHR r) {
  string_t ret = "";
  V_ENM_STR(VK_COLOR_SPACE_SRGB_NONLINEAR_KHR);
  V_ENM_STR(VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_BT709_LINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_BT709_NONLINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_BT2020_LINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_HDR10_ST2084_EXT);
  V_ENM_STR(VK_COLOR_SPACE_DOLBYVISION_EXT);
  V_ENM_STR(VK_COLOR_SPACE_HDR10_HLG_EXT);
  V_ENM_STR(VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_PASS_THROUGH_EXT);
  V_ENM_STR(VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_DISPLAY_NATIVE_AMD);
  V_ENM_STR(VK_COLORSPACE_SRGB_NONLINEAR_KHR);
  V_ENM_STR(VK_COLOR_SPACE_DCI_P3_LINEAR_EXT);
  V_ENM_STR(VK_COLOR_SPACE_BEGIN_RANGE_KHR);
  V_ENM_STR(VK_COLOR_SPACE_END_RANGE_KHR);
  V_ENM_STR(VK_COLOR_SPACE_RANGE_SIZE_KHR);
  V_ENM_STR(VK_COLOR_SPACE_MAX_ENUM_KHR);
  return ret;
}
string_t VulkanDebug::VkFormat_toString(VkFormat r) {
  string_t ret = "";
  V_ENM_STR(VK_FORMAT_UNDEFINED);
  V_ENM_STR(VK_FORMAT_R4G4_UNORM_PACK8);
  V_ENM_STR(VK_FORMAT_R4G4B4A4_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_B4G4R4A4_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_R5G6B5_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_B5G6R5_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_R5G5B5A1_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_B5G5R5A1_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_A1R5G5B5_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_R8_UNORM);
  V_ENM_STR(VK_FORMAT_R8_SNORM);
  V_ENM_STR(VK_FORMAT_R8_USCALED);
  V_ENM_STR(VK_FORMAT_R8_SSCALED);
  V_ENM_STR(VK_FORMAT_R8_UINT);
  V_ENM_STR(VK_FORMAT_R8_SINT);
  V_ENM_STR(VK_FORMAT_R8_SRGB);
  V_ENM_STR(VK_FORMAT_R8G8_UNORM);
  V_ENM_STR(VK_FORMAT_R8G8_SNORM);
  V_ENM_STR(VK_FORMAT_R8G8_USCALED);
  V_ENM_STR(VK_FORMAT_R8G8_SSCALED);
  V_ENM_STR(VK_FORMAT_R8G8_UINT);
  V_ENM_STR(VK_FORMAT_R8G8_SINT);
  V_ENM_STR(VK_FORMAT_R8G8_SRGB);
  V_ENM_STR(VK_FORMAT_R8G8B8_UNORM);
  V_ENM_STR(VK_FORMAT_R8G8B8_SNORM);
  V_ENM_STR(VK_FORMAT_R8G8B8_USCALED);
  V_ENM_STR(VK_FORMAT_R8G8B8_SSCALED);
  V_ENM_STR(VK_FORMAT_R8G8B8_UINT);
  V_ENM_STR(VK_FORMAT_R8G8B8_SINT);
  V_ENM_STR(VK_FORMAT_R8G8B8_SRGB);
  V_ENM_STR(VK_FORMAT_B8G8R8_UNORM);
  V_ENM_STR(VK_FORMAT_B8G8R8_SNORM);
  V_ENM_STR(VK_FORMAT_B8G8R8_USCALED);
  V_ENM_STR(VK_FORMAT_B8G8R8_SSCALED);
  V_ENM_STR(VK_FORMAT_B8G8R8_UINT);
  V_ENM_STR(VK_FORMAT_B8G8R8_SINT);
  V_ENM_STR(VK_FORMAT_B8G8R8_SRGB);
  V_ENM_STR(VK_FORMAT_R8G8B8A8_UNORM);
  V_ENM_STR(VK_FORMAT_R8G8B8A8_SNORM);
  V_ENM_STR(VK_FORMAT_R8G8B8A8_USCALED);
  V_ENM_STR(VK_FORMAT_R8G8B8A8_SSCALED);
  V_ENM_STR(VK_FORMAT_R8G8B8A8_UINT);
  V_ENM_STR(VK_FORMAT_R8G8B8A8_SINT);
  V_ENM_STR(VK_FORMAT_R8G8B8A8_SRGB);
  V_ENM_STR(VK_FORMAT_B8G8R8A8_UNORM);
  V_ENM_STR(VK_FORMAT_B8G8R8A8_SNORM);
  V_ENM_STR(VK_FORMAT_B8G8R8A8_USCALED);
  V_ENM_STR(VK_FORMAT_B8G8R8A8_SSCALED);
  V_ENM_STR(VK_FORMAT_B8G8R8A8_UINT);
  V_ENM_STR(VK_FORMAT_B8G8R8A8_SINT);
  V_ENM_STR(VK_FORMAT_B8G8R8A8_SRGB);
  V_ENM_STR(VK_FORMAT_A8B8G8R8_UNORM_PACK32);
  V_ENM_STR(VK_FORMAT_A8B8G8R8_SNORM_PACK32);
  V_ENM_STR(VK_FORMAT_A8B8G8R8_USCALED_PACK32);
  V_ENM_STR(VK_FORMAT_A8B8G8R8_SSCALED_PACK32);
  V_ENM_STR(VK_FORMAT_A8B8G8R8_UINT_PACK32);
  V_ENM_STR(VK_FORMAT_A8B8G8R8_SINT_PACK32);
  V_ENM_STR(VK_FORMAT_A8B8G8R8_SRGB_PACK32);
  V_ENM_STR(VK_FORMAT_A2R10G10B10_UNORM_PACK32);
  V_ENM_STR(VK_FORMAT_A2R10G10B10_SNORM_PACK32);
  V_ENM_STR(VK_FORMAT_A2R10G10B10_USCALED_PACK32);
  V_ENM_STR(VK_FORMAT_A2R10G10B10_SSCALED_PACK32);
  V_ENM_STR(VK_FORMAT_A2R10G10B10_UINT_PACK32);
  V_ENM_STR(VK_FORMAT_A2R10G10B10_SINT_PACK32);
  V_ENM_STR(VK_FORMAT_A2B10G10R10_UNORM_PACK32);
  V_ENM_STR(VK_FORMAT_A2B10G10R10_SNORM_PACK32);
  V_ENM_STR(VK_FORMAT_A2B10G10R10_USCALED_PACK32);
  V_ENM_STR(VK_FORMAT_A2B10G10R10_SSCALED_PACK32);
  V_ENM_STR(VK_FORMAT_A2B10G10R10_UINT_PACK32);
  V_ENM_STR(VK_FORMAT_A2B10G10R10_SINT_PACK32);
  V_ENM_STR(VK_FORMAT_R16_UNORM);
  V_ENM_STR(VK_FORMAT_R16_SNORM);
  V_ENM_STR(VK_FORMAT_R16_USCALED);
  V_ENM_STR(VK_FORMAT_R16_SSCALED);
  V_ENM_STR(VK_FORMAT_R16_UINT);
  V_ENM_STR(VK_FORMAT_R16_SINT);
  V_ENM_STR(VK_FORMAT_R16_SFLOAT);
  V_ENM_STR(VK_FORMAT_R16G16_UNORM);
  V_ENM_STR(VK_FORMAT_R16G16_SNORM);
  V_ENM_STR(VK_FORMAT_R16G16_USCALED);
  V_ENM_STR(VK_FORMAT_R16G16_SSCALED);
  V_ENM_STR(VK_FORMAT_R16G16_UINT);
  V_ENM_STR(VK_FORMAT_R16G16_SINT);
  V_ENM_STR(VK_FORMAT_R16G16_SFLOAT);
  V_ENM_STR(VK_FORMAT_R16G16B16_UNORM);
  V_ENM_STR(VK_FORMAT_R16G16B16_SNORM);
  V_ENM_STR(VK_FORMAT_R16G16B16_USCALED);
  V_ENM_STR(VK_FORMAT_R16G16B16_SSCALED);
  V_ENM_STR(VK_FORMAT_R16G16B16_UINT);
  V_ENM_STR(VK_FORMAT_R16G16B16_SINT);
  V_ENM_STR(VK_FORMAT_R16G16B16_SFLOAT);
  V_ENM_STR(VK_FORMAT_R16G16B16A16_UNORM);
  V_ENM_STR(VK_FORMAT_R16G16B16A16_SNORM);
  V_ENM_STR(VK_FORMAT_R16G16B16A16_USCALED);
  V_ENM_STR(VK_FORMAT_R16G16B16A16_SSCALED);
  V_ENM_STR(VK_FORMAT_R16G16B16A16_UINT);
  V_ENM_STR(VK_FORMAT_R16G16B16A16_SINT);
  V_ENM_STR(VK_FORMAT_R16G16B16A16_SFLOAT);
  V_ENM_STR(VK_FORMAT_R32_UINT);
  V_ENM_STR(VK_FORMAT_R32_SINT);
  V_ENM_STR(VK_FORMAT_R32_SFLOAT);
  V_ENM_STR(VK_FORMAT_R32G32_UINT);
  V_ENM_STR(VK_FORMAT_R32G32_SINT);
  V_ENM_STR(VK_FORMAT_R32G32_SFLOAT);
  V_ENM_STR(VK_FORMAT_R32G32B32_UINT);
  V_ENM_STR(VK_FORMAT_R32G32B32_SINT);
  V_ENM_STR(VK_FORMAT_R32G32B32_SFLOAT);
  V_ENM_STR(VK_FORMAT_R32G32B32A32_UINT);
  V_ENM_STR(VK_FORMAT_R32G32B32A32_SINT);
  V_ENM_STR(VK_FORMAT_R32G32B32A32_SFLOAT);
  V_ENM_STR(VK_FORMAT_R64_UINT);
  V_ENM_STR(VK_FORMAT_R64_SINT);
  V_ENM_STR(VK_FORMAT_R64_SFLOAT);
  V_ENM_STR(VK_FORMAT_R64G64_UINT);
  V_ENM_STR(VK_FORMAT_R64G64_SINT);
  V_ENM_STR(VK_FORMAT_R64G64_SFLOAT);
  V_ENM_STR(VK_FORMAT_R64G64B64_UINT);
  V_ENM_STR(VK_FORMAT_R64G64B64_SINT);
  V_ENM_STR(VK_FORMAT_R64G64B64_SFLOAT);
  V_ENM_STR(VK_FORMAT_R64G64B64A64_UINT);
  V_ENM_STR(VK_FORMAT_R64G64B64A64_SINT);
  V_ENM_STR(VK_FORMAT_R64G64B64A64_SFLOAT);
  V_ENM_STR(VK_FORMAT_B10G11R11_UFLOAT_PACK32);
  V_ENM_STR(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32);
  V_ENM_STR(VK_FORMAT_D16_UNORM);
  V_ENM_STR(VK_FORMAT_X8_D24_UNORM_PACK32);
  V_ENM_STR(VK_FORMAT_D32_SFLOAT);
  V_ENM_STR(VK_FORMAT_S8_UINT);
  V_ENM_STR(VK_FORMAT_D16_UNORM_S8_UINT);
  V_ENM_STR(VK_FORMAT_D24_UNORM_S8_UINT);
  V_ENM_STR(VK_FORMAT_D32_SFLOAT_S8_UINT);
  V_ENM_STR(VK_FORMAT_BC1_RGB_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC1_RGB_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_BC1_RGBA_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC1_RGBA_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_BC2_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC2_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_BC3_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC3_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_BC4_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC4_SNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC5_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC5_SNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC6H_UFLOAT_BLOCK);
  V_ENM_STR(VK_FORMAT_BC6H_SFLOAT_BLOCK);
  V_ENM_STR(VK_FORMAT_BC7_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_BC7_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_EAC_R11_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_EAC_R11_SNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_EAC_R11G11_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_EAC_R11G11_SNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_4x4_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_4x4_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_5x4_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_5x4_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_5x5_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_5x5_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_6x5_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_6x5_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_6x6_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_6x6_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_8x5_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_8x5_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_8x6_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_8x6_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_8x8_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_8x8_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_10x5_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_10x5_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_10x6_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_10x6_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_10x8_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_10x8_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_10x10_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_10x10_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_12x10_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_12x10_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_12x12_UNORM_BLOCK);
  V_ENM_STR(VK_FORMAT_ASTC_12x12_SRGB_BLOCK);
  V_ENM_STR(VK_FORMAT_G8B8G8R8_422_UNORM);
  V_ENM_STR(VK_FORMAT_B8G8R8G8_422_UNORM);
  V_ENM_STR(VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM);
  V_ENM_STR(VK_FORMAT_G8_B8R8_2PLANE_420_UNORM);
  V_ENM_STR(VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM);
  V_ENM_STR(VK_FORMAT_G8_B8R8_2PLANE_422_UNORM);
  V_ENM_STR(VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM);
  V_ENM_STR(VK_FORMAT_R10X6_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_R10X6G10X6_UNORM_2PACK16);
  V_ENM_STR(VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16);
  V_ENM_STR(VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16);
  V_ENM_STR(VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_R12X4_UNORM_PACK16);
  V_ENM_STR(VK_FORMAT_R12X4G12X4_UNORM_2PACK16);
  V_ENM_STR(VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16);
  V_ENM_STR(VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16);
  V_ENM_STR(VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16);
  V_ENM_STR(VK_FORMAT_G16B16G16R16_422_UNORM);
  V_ENM_STR(VK_FORMAT_B16G16R16G16_422_UNORM);
  V_ENM_STR(VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM);
  V_ENM_STR(VK_FORMAT_G16_B16R16_2PLANE_420_UNORM);
  V_ENM_STR(VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM);
  V_ENM_STR(VK_FORMAT_G16_B16R16_2PLANE_422_UNORM);
  V_ENM_STR(VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM);
  V_ENM_STR(VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG);
  V_ENM_STR(VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG);
  V_ENM_STR(VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG);
  V_ENM_STR(VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG);
  V_ENM_STR(VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG);
  V_ENM_STR(VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG);
  V_ENM_STR(VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG);
  V_ENM_STR(VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG);
#ifdef VK_VERSION_1_2

  V_ENM_STR(VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT);
  V_ENM_STR(VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT);
#endif
  V_ENM_STR(VK_FORMAT_G8B8G8R8_422_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_B8G8R8G8_422_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_R10X6_UNORM_PACK16_KHR);
  V_ENM_STR(VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR);
  V_ENM_STR(VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR);
  V_ENM_STR(VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_R12X4_UNORM_PACK16_KHR);
  V_ENM_STR(VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR);
  V_ENM_STR(VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR);
  V_ENM_STR(VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR);
  V_ENM_STR(VK_FORMAT_G16B16G16R16_422_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_B16G16R16G16_422_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR);
  V_ENM_STR(VK_FORMAT_BEGIN_RANGE);
  V_ENM_STR(VK_FORMAT_END_RANGE);
  V_ENM_STR(VK_FORMAT_RANGE_SIZE);
  V_ENM_STR(VK_FORMAT_MAX_ENUM);
  return ret;
}
string_t VulkanDebug::VkResult_toString(VkResult r) {
  string_t ret = "Invalid VkResult.";
  V_ENM_STR(VK_SUCCESS);
  V_ENM_STR(VK_NOT_READY);
  V_ENM_STR(VK_TIMEOUT);
  V_ENM_STR(VK_EVENT_SET);
  V_ENM_STR(VK_EVENT_RESET);
  V_ENM_STR(VK_INCOMPLETE);
  V_ENM_STR(VK_ERROR_OUT_OF_HOST_MEMORY);
  V_ENM_STR(VK_ERROR_OUT_OF_DEVICE_MEMORY);
  V_ENM_STR(VK_ERROR_INITIALIZATION_FAILED);
  V_ENM_STR(VK_ERROR_DEVICE_LOST);
  V_ENM_STR(VK_ERROR_MEMORY_MAP_FAILED);
  V_ENM_STR(VK_ERROR_LAYER_NOT_PRESENT);
  V_ENM_STR(VK_ERROR_EXTENSION_NOT_PRESENT);
  V_ENM_STR(VK_ERROR_FEATURE_NOT_PRESENT);
  V_ENM_STR(VK_ERROR_INCOMPATIBLE_DRIVER);
  V_ENM_STR(VK_ERROR_TOO_MANY_OBJECTS);
  V_ENM_STR(VK_ERROR_FORMAT_NOT_SUPPORTED);
  V_ENM_STR(VK_ERROR_FRAGMENTED_POOL);
#ifdef VK_VERSION_1_2
  V_ENM_STR(VK_ERROR_UNKNOWN);
  V_ENM_STR(VK_ERROR_FRAGMENTATION);
  V_ENM_STR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
  V_ENM_STR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR);
#endif
  V_ENM_STR(VK_ERROR_OUT_OF_POOL_MEMORY);
  V_ENM_STR(VK_ERROR_INVALID_EXTERNAL_HANDLE);

  V_ENM_STR(VK_ERROR_SURFACE_LOST_KHR);
  V_ENM_STR(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
  V_ENM_STR(VK_SUBOPTIMAL_KHR);
  V_ENM_STR(VK_ERROR_OUT_OF_DATE_KHR);
  V_ENM_STR(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
  V_ENM_STR(VK_ERROR_VALIDATION_FAILED_EXT);
  V_ENM_STR(VK_ERROR_INVALID_SHADER_NV);
  V_ENM_STR(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
  V_ENM_STR(VK_ERROR_NOT_PERMITTED_EXT);
  V_ENM_STR(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
  V_ENM_STR(VK_ERROR_OUT_OF_POOL_MEMORY_KHR);
  V_ENM_STR(VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR);
  V_ENM_STR(VK_ERROR_FRAGMENTATION_EXT);
  V_ENM_STR(VK_ERROR_INVALID_DEVICE_ADDRESS_EXT);
  //These don't appear to be in the latest SDK on Windows, what gives?
  //V_ENM_STR(VK_RESULT_BEGIN_RANGE);
  //V_ENM_STR(VK_RESULT_END_RANGE);
  //V_ENM_STR(VK_RESULT_RANGE_SIZE);
  V_ENM_STR(VK_RESULT_MAX_ENUM);
  return ret;
}

#pragma endregion

}  // namespace VG
